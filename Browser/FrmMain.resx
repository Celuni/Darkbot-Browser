<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>